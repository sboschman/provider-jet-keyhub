/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha2

import (
	"github.com/pkg/errors"

	"github.com/crossplane/terrajet/pkg/resource"
	"github.com/crossplane/terrajet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this KeyHubClientApplication
func (mg *KeyHubClientApplication) GetTerraformResourceType() string {
	return "keyhub_clientapplication"
}

// GetConnectionDetailsMapping for this KeyHubClientApplication
func (tr *KeyHubClientApplication) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"clientsecret": "status.atProvider.clientsecret"}
}

// GetObservation of this KeyHubClientApplication
func (tr *KeyHubClientApplication) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this KeyHubClientApplication
func (tr *KeyHubClientApplication) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this KeyHubClientApplication
func (tr *KeyHubClientApplication) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this KeyHubClientApplication
func (tr *KeyHubClientApplication) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this KeyHubClientApplication
func (tr *KeyHubClientApplication) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this KeyHubClientApplication using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *KeyHubClientApplication) LateInitialize(attrs []byte) (bool, error) {
	params := &KeyHubClientApplicationParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *KeyHubClientApplication) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this KeyHubGroup
func (mg *KeyHubGroup) GetTerraformResourceType() string {
	return "keyhub_group"
}

// GetConnectionDetailsMapping for this KeyHubGroup
func (tr *KeyHubGroup) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this KeyHubGroup
func (tr *KeyHubGroup) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this KeyHubGroup
func (tr *KeyHubGroup) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this KeyHubGroup
func (tr *KeyHubGroup) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this KeyHubGroup
func (tr *KeyHubGroup) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this KeyHubGroup
func (tr *KeyHubGroup) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this KeyHubGroup using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *KeyHubGroup) LateInitialize(attrs []byte) (bool, error) {
	params := &KeyHubGroupParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *KeyHubGroup) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this KeyHubGroupOnSystem
func (mg *KeyHubGroupOnSystem) GetTerraformResourceType() string {
	return "keyhub_grouponsystem"
}

// GetConnectionDetailsMapping for this KeyHubGroupOnSystem
func (tr *KeyHubGroupOnSystem) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this KeyHubGroupOnSystem
func (tr *KeyHubGroupOnSystem) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this KeyHubGroupOnSystem
func (tr *KeyHubGroupOnSystem) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this KeyHubGroupOnSystem
func (tr *KeyHubGroupOnSystem) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this KeyHubGroupOnSystem
func (tr *KeyHubGroupOnSystem) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this KeyHubGroupOnSystem
func (tr *KeyHubGroupOnSystem) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this KeyHubGroupOnSystem using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *KeyHubGroupOnSystem) LateInitialize(attrs []byte) (bool, error) {
	params := &KeyHubGroupOnSystemParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *KeyHubGroupOnSystem) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this KeyHubVaultRecord
func (mg *KeyHubVaultRecord) GetTerraformResourceType() string {
	return "keyhub_vaultrecord"
}

// GetConnectionDetailsMapping for this KeyHubVaultRecord
func (tr *KeyHubVaultRecord) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"comment": "spec.forProvider.commentSecretRef", "file": "spec.forProvider.fileSecretRef", "password": "spec.forProvider.passwordSecretRef", "totp": "spec.forProvider.totpSecretRef"}
}

// GetObservation of this KeyHubVaultRecord
func (tr *KeyHubVaultRecord) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this KeyHubVaultRecord
func (tr *KeyHubVaultRecord) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this KeyHubVaultRecord
func (tr *KeyHubVaultRecord) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this KeyHubVaultRecord
func (tr *KeyHubVaultRecord) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this KeyHubVaultRecord
func (tr *KeyHubVaultRecord) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this KeyHubVaultRecord using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *KeyHubVaultRecord) LateInitialize(attrs []byte) (bool, error) {
	params := &KeyHubVaultRecordParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *KeyHubVaultRecord) GetTerraformSchemaVersion() int {
	return 0
}
