/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AttributeObservation struct {
}

type AttributeParameters struct {

	// The name of the attribute
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The script defines the body of a `function (account, groups) { <SCRIPT> }` function, and is written in JavaScript using the ECMAScript 5 standard
	// +kubebuilder:validation:Required
	Script *string `json:"script" tf:"script,omitempty"`
}

type KeyHubClientApplicationObservation struct {
	Binddn *string `json:"binddn,omitempty" tf:"binddn,omitempty"`

	Clientid *string `json:"clientid,omitempty" tf:"clientid,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type KeyHubClientApplicationParameters struct {

	// The additional attributes which can be retrieved through userinfo
	// +kubebuilder:validation:Optional
	Attribute []AttributeParameters `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// The client is a code and implicit client
	// +kubebuilder:validation:Optional
	CallbackURI *string `json:"callbackUri,omitempty" tf:"callback_uri,omitempty"`

	// +kubebuilder:validation:Optional
	ClientCertificate *string `json:"clientCertificate,omitempty" tf:"client_certificate,omitempty"`

	// A confidential (or trusted) OAUTH2 client is able to keep its credentials a secret
	// +kubebuilder:validation:Optional
	Confidential *bool `json:"confidential,omitempty" tf:"confidential,omitempty"`

	// A space-separated list of claims. These claims are added to the 'id_token', even if the client does not explicitly request them to be added
	// +kubebuilder:validation:Optional
	IDTokenClaims *string `json:"idTokenClaims,omitempty" tf:"id_token_claims,omitempty"`

	// The URI within the application where a third party login can be started.
	// +kubebuilder:validation:Optional
	InitiateLoginURI *string `json:"initiateLoginUri,omitempty" tf:"initiate_login_uri,omitempty"`

	// The client is a code and implicit client
	// +kubebuilder:validation:Optional
	IsServer2Server *bool `json:"isServer2Server,omitempty" tf:"is_server2server,omitempty"`

	// If set the client application is a Single Sign On application
	// +kubebuilder:validation:Optional
	IsSso *bool `json:"isSso,omitempty" tf:"is_sso,omitempty"`

	// The metadata of the SAML application, use if metadata_url is not available
	// +kubebuilder:validation:Optional
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// The URL to retrieve the SAML metadata from
	// +kubebuilder:validation:Optional
	MetadataURL *string `json:"metadataUrl,omitempty" tf:"metadata_url,omitempty"`

	// The name of the created client application
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The UUID of the group that is owner of the client
	// +kubebuilder:validation:Required
	Owner *string `json:"owner" tf:"owner,omitempty"`

	// The Allowed scopes for the client application. For SSO applications this defaults to `profile`
	// +kubebuilder:validation:Optional
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// +kubebuilder:validation:Optional
	Segments *string `json:"segments,omitempty" tf:"segments,omitempty"`

	// Displays a landing page immediately after login and before redirecting to the SSO application
	// +kubebuilder:validation:Optional
	ShowLandingpage *bool `json:"showLandingpage,omitempty" tf:"show_landingpage,omitempty"`

	// Topicus KeyHub can deliver the subject in three formats: Primary identifier, UPN and username.
	// +kubebuilder:validation:Optional
	SubjectFormat *string `json:"subjectFormat,omitempty" tf:"subject_format,omitempty"`

	// The UUID of the group that is technical administrator of the client, default to Owner
	// +kubebuilder:validation:Optional
	TechnicalAdministrator *string `json:"technicalAdministrator,omitempty" tf:"technical_administrator,omitempty"`

	// The type of the client application. Possible values: `OAUTH2` (default), `LDAP`, `SAML2`
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// +kubebuilder:validation:Optional
	UsedForProvisioning *bool `json:"usedForProvisioning,omitempty" tf:"used_for_provisioning,omitempty"`
}

// KeyHubClientApplicationSpec defines the desired state of KeyHubClientApplication
type KeyHubClientApplicationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KeyHubClientApplicationParameters `json:"forProvider"`
}

// KeyHubClientApplicationStatus defines the observed state of KeyHubClientApplication.
type KeyHubClientApplicationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KeyHubClientApplicationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// KeyHubClientApplication is the Schema for the KeyHubClientApplications API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keyhubjet}
type KeyHubClientApplication struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KeyHubClientApplicationSpec   `json:"spec"`
	Status            KeyHubClientApplicationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KeyHubClientApplicationList contains a list of KeyHubClientApplications
type KeyHubClientApplicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KeyHubClientApplication `json:"items"`
}

// Repository type metadata.
var (
	KeyHubClientApplication_Kind             = "KeyHubClientApplication"
	KeyHubClientApplication_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: KeyHubClientApplication_Kind}.String()
	KeyHubClientApplication_KindAPIVersion   = KeyHubClientApplication_Kind + "." + CRDGroupVersion.String()
	KeyHubClientApplication_GroupVersionKind = CRDGroupVersion.WithKind(KeyHubClientApplication_Kind)
)

func init() {
	SchemeBuilder.Register(&KeyHubClientApplication{}, &KeyHubClientApplicationList{})
}
