/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type KeyHubVaultRecordObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type KeyHubVaultRecordParameters struct {

	// If true, the value of `file` must be base64 encoded
	// +kubebuilder:validation:Optional
	Base64Encoded *bool `json:"base64Encoded,omitempty" tf:"base64_encoded,omitempty"`

	// +kubebuilder:validation:Optional
	CommentSecretRef *v1.SecretKeySelector `json:"commentSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	FileSecretRef *v1.SecretKeySelector `json:"fileSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`

	// +kubebuilder:validation:Required
	Groupuuid *string `json:"groupuuid" tf:"groupuuid,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	TotpSecretRef *v1.SecretKeySelector `json:"totpSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

// KeyHubVaultRecordSpec defines the desired state of KeyHubVaultRecord
type KeyHubVaultRecordSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KeyHubVaultRecordParameters `json:"forProvider"`
}

// KeyHubVaultRecordStatus defines the observed state of KeyHubVaultRecord.
type KeyHubVaultRecordStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KeyHubVaultRecordObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// KeyHubVaultRecord is the Schema for the KeyHubVaultRecords API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keyhubjet}
type KeyHubVaultRecord struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KeyHubVaultRecordSpec   `json:"spec"`
	Status            KeyHubVaultRecordStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KeyHubVaultRecordList contains a list of KeyHubVaultRecords
type KeyHubVaultRecordList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KeyHubVaultRecord `json:"items"`
}

// Repository type metadata.
var (
	KeyHubVaultRecord_Kind             = "KeyHubVaultRecord"
	KeyHubVaultRecord_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: KeyHubVaultRecord_Kind}.String()
	KeyHubVaultRecord_KindAPIVersion   = KeyHubVaultRecord_Kind + "." + CRDGroupVersion.String()
	KeyHubVaultRecord_GroupVersionKind = CRDGroupVersion.WithKind(KeyHubVaultRecord_Kind)
)

func init() {
	SchemeBuilder.Register(&KeyHubVaultRecord{}, &KeyHubVaultRecordList{})
}
