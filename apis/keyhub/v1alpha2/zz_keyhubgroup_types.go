/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClientObservation struct {
}

type ClientParameters struct {

	// List of permissions to grant the client application. Possible values: `GROUP_FULL_VAULT_ACCESS`, `GROUP_READ_CONTENTS`, `GROUP_SET_AUTHORIZATION`
	// +kubebuilder:validation:Required
	Permissions []*string `json:"permissions" tf:"permissions,omitempty"`

	// The UUID of the client application
	// +kubebuilder:validation:Required
	UUID *string `json:"uuid" tf:"uuid,omitempty"`
}

type KeyHubGroupObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type KeyHubGroupParameters struct {

	// Group can be assign as managing group of an application
	// +kubebuilder:validation:Optional
	ApplicationAdministration *bool `json:"applicationAdministration,omitempty" tf:"application_administration,omitempty"`

	// List of Months the group must be audited. Possible Values: `JANUARY`,`FEBRUARY`,`MARCH`,`APRIL`,`MAY`,`JUNE`,`JULY`,`AUGUST`,`SEPTEMBER`,`OCTOBER`,`NOVEMBER`,`DECEMBER`
	// +kubebuilder:validation:Optional
	AuditMonths []*string `json:"auditMonths,omitempty" tf:"audit_months,omitempty"`

	// The UUID of the group to set as authorizing group for audits
	// +kubebuilder:validation:Optional
	AuditingAuthGroupuuid *string `json:"auditingAuthGroupuuid,omitempty" tf:"auditing_auth_groupuuid,omitempty"`

	// +kubebuilder:validation:Optional
	Auditor *bool `json:"auditor,omitempty" tf:"auditor,omitempty"`

	// Grant clients permissions on the create group, (client used by terraform provider requires global `GROUPS_GRANT_PERMISSIONS_AFTER_CREATE` permission)
	// +kubebuilder:validation:Optional
	Client []ClientParameters `json:"client,omitempty" tf:"client,omitempty"`

	// The description of the group
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Defines extended access. Possible values: `NOT_ALLOWED` (default), `ONE_WEEK`, `TWO_WEEKS`
	// +kubebuilder:validation:Optional
	ExtendedAccess *string `json:"extendedAccess,omitempty" tf:"extended_access,omitempty"`

	// Don't show audit trail in KeyHub Dashboard
	// +kubebuilder:validation:Optional
	HideAuditTrail *bool `json:"hideAuditTrail,omitempty" tf:"hide_audit_trail,omitempty"`

	// At least one manager or nested_under_groupuuid should be defined
	// +kubebuilder:validation:Optional
	Member []MemberParameters `json:"member,omitempty" tf:"member,omitempty"`

	// The UUID of the group to set as authorizing group for membership
	// +kubebuilder:validation:Optional
	MembershipAuthGroupuuid *string `json:"membershipAuthGroupuuid,omitempty" tf:"membership_auth_groupuuid,omitempty"`

	// The Name field of the group
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The UUID of the group to nest the new group under
	// +kubebuilder:validation:Optional
	NestedUnderGroupuuid *string `json:"nestedUnderGroupuuid,omitempty" tf:"nested_under_groupuuid,omitempty"`

	// Set group to invite only
	// +kubebuilder:validation:Optional
	PrivateGroup *bool `json:"privateGroup,omitempty" tf:"private_group,omitempty"`

	// The UUID of the group to set as authorizing group for provisioning
	// +kubebuilder:validation:Optional
	ProvisioningAuthGroupuuid *string `json:"provisioningAuthGroupuuid,omitempty" tf:"provisioning_auth_groupuuid,omitempty"`

	// Require a reason before activating a group
	// +kubebuilder:validation:Optional
	RecordTrail *bool `json:"recordTrail,omitempty" tf:"record_trail,omitempty"`

	// Required rotating password for members
	// +kubebuilder:validation:Optional
	RotatingPasswordRequired *bool `json:"rotatingPasswordRequired,omitempty" tf:"rotating_password_required,omitempty"`

	// +kubebuilder:validation:Optional
	SingleManaged *bool `json:"singleManaged,omitempty" tf:"single_managed,omitempty"`

	// Defines recovery strategy. Possible Values: `FULL` (default), `RECOVERY_KEY_ONLY`, `NONE`
	// +kubebuilder:validation:Optional
	VaultRecovery *string `json:"vaultRecovery,omitempty" tf:"vault_recovery,omitempty"`
}

type MemberObservation struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type MemberParameters struct {

	// The rights of the member. Possible values: `MANAGER` (default), `NORMAL`
	// +kubebuilder:validation:Optional
	Rights *string `json:"rights,omitempty" tf:"rights,omitempty"`

	// The uuid of the keyhub account to add as member
	// +kubebuilder:validation:Required
	UUID *string `json:"uuid" tf:"uuid,omitempty"`
}

// KeyHubGroupSpec defines the desired state of KeyHubGroup
type KeyHubGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KeyHubGroupParameters `json:"forProvider"`
}

// KeyHubGroupStatus defines the observed state of KeyHubGroup.
type KeyHubGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KeyHubGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// KeyHubGroup is the Schema for the KeyHubGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keyhubjet}
type KeyHubGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KeyHubGroupSpec   `json:"spec"`
	Status            KeyHubGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KeyHubGroupList contains a list of KeyHubGroups
type KeyHubGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KeyHubGroup `json:"items"`
}

// Repository type metadata.
var (
	KeyHubGroup_Kind             = "KeyHubGroup"
	KeyHubGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: KeyHubGroup_Kind}.String()
	KeyHubGroup_KindAPIVersion   = KeyHubGroup_Kind + "." + CRDGroupVersion.String()
	KeyHubGroup_GroupVersionKind = CRDGroupVersion.WithKind(KeyHubGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&KeyHubGroup{}, &KeyHubGroupList{})
}
